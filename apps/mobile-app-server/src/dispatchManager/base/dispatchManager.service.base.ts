/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DispatchManager as PrismaDispatchManager,
} from "@prisma/client";

export class DispatchManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DispatchManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dispatchManager.count(args);
  }

  async dispatchManagers(
    args: Prisma.DispatchManagerFindManyArgs
  ): Promise<PrismaDispatchManager[]> {
    return this.prisma.dispatchManager.findMany(args);
  }
  async dispatchManager(
    args: Prisma.DispatchManagerFindUniqueArgs
  ): Promise<PrismaDispatchManager | null> {
    return this.prisma.dispatchManager.findUnique(args);
  }
  async createDispatchManager(
    args: Prisma.DispatchManagerCreateArgs
  ): Promise<PrismaDispatchManager> {
    return this.prisma.dispatchManager.create(args);
  }
  async updateDispatchManager(
    args: Prisma.DispatchManagerUpdateArgs
  ): Promise<PrismaDispatchManager> {
    return this.prisma.dispatchManager.update(args);
  }
  async deleteDispatchManager(
    args: Prisma.DispatchManagerDeleteArgs
  ): Promise<PrismaDispatchManager> {
    return this.prisma.dispatchManager.delete(args);
  }
}
