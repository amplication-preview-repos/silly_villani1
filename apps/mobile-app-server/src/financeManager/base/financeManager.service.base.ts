/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FinanceManager as PrismaFinanceManager } from "@prisma/client";

export class FinanceManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinanceManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financeManager.count(args);
  }

  async financeManagers(
    args: Prisma.FinanceManagerFindManyArgs
  ): Promise<PrismaFinanceManager[]> {
    return this.prisma.financeManager.findMany(args);
  }
  async financeManager(
    args: Prisma.FinanceManagerFindUniqueArgs
  ): Promise<PrismaFinanceManager | null> {
    return this.prisma.financeManager.findUnique(args);
  }
  async createFinanceManager(
    args: Prisma.FinanceManagerCreateArgs
  ): Promise<PrismaFinanceManager> {
    return this.prisma.financeManager.create(args);
  }
  async updateFinanceManager(
    args: Prisma.FinanceManagerUpdateArgs
  ): Promise<PrismaFinanceManager> {
    return this.prisma.financeManager.update(args);
  }
  async deleteFinanceManager(
    args: Prisma.FinanceManagerDeleteArgs
  ): Promise<PrismaFinanceManager> {
    return this.prisma.financeManager.delete(args);
  }
}
