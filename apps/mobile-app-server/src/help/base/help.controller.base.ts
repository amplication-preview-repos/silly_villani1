/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HelpService } from "../help.service";
import { HelpCreateInput } from "./HelpCreateInput";
import { Help } from "./Help";
import { HelpFindManyArgs } from "./HelpFindManyArgs";
import { HelpWhereUniqueInput } from "./HelpWhereUniqueInput";
import { HelpUpdateInput } from "./HelpUpdateInput";

export class HelpControllerBase {
  constructor(protected readonly service: HelpService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Help })
  async createHelp(@common.Body() data: HelpCreateInput): Promise<Help> {
    return await this.service.createHelp({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Help] })
  @ApiNestedQuery(HelpFindManyArgs)
  async helps(@common.Req() request: Request): Promise<Help[]> {
    const args = plainToClass(HelpFindManyArgs, request.query);
    return this.service.helps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Help })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async help(
    @common.Param() params: HelpWhereUniqueInput
  ): Promise<Help | null> {
    const result = await this.service.help({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Help })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHelp(
    @common.Param() params: HelpWhereUniqueInput,
    @common.Body() data: HelpUpdateInput
  ): Promise<Help | null> {
    try {
      return await this.service.updateHelp({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Help })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHelp(
    @common.Param() params: HelpWhereUniqueInput
  ): Promise<Help | null> {
    try {
      return await this.service.deleteHelp({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
