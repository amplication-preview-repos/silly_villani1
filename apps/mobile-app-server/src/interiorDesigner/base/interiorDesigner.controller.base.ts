/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InteriorDesignerService } from "../interiorDesigner.service";
import { InteriorDesignerCreateInput } from "./InteriorDesignerCreateInput";
import { InteriorDesigner } from "./InteriorDesigner";
import { InteriorDesignerFindManyArgs } from "./InteriorDesignerFindManyArgs";
import { InteriorDesignerWhereUniqueInput } from "./InteriorDesignerWhereUniqueInput";
import { InteriorDesignerUpdateInput } from "./InteriorDesignerUpdateInput";

export class InteriorDesignerControllerBase {
  constructor(protected readonly service: InteriorDesignerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InteriorDesigner })
  async createInteriorDesigner(
    @common.Body() data: InteriorDesignerCreateInput
  ): Promise<InteriorDesigner> {
    return await this.service.createInteriorDesigner({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InteriorDesigner] })
  @ApiNestedQuery(InteriorDesignerFindManyArgs)
  async interiorDesigners(
    @common.Req() request: Request
  ): Promise<InteriorDesigner[]> {
    const args = plainToClass(InteriorDesignerFindManyArgs, request.query);
    return this.service.interiorDesigners({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InteriorDesigner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interiorDesigner(
    @common.Param() params: InteriorDesignerWhereUniqueInput
  ): Promise<InteriorDesigner | null> {
    const result = await this.service.interiorDesigner({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InteriorDesigner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInteriorDesigner(
    @common.Param() params: InteriorDesignerWhereUniqueInput,
    @common.Body() data: InteriorDesignerUpdateInput
  ): Promise<InteriorDesigner | null> {
    try {
      return await this.service.updateInteriorDesigner({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InteriorDesigner })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInteriorDesigner(
    @common.Param() params: InteriorDesignerWhereUniqueInput
  ): Promise<InteriorDesigner | null> {
    try {
      return await this.service.deleteInteriorDesigner({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
