/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  InventoryManager as PrismaInventoryManager,
} from "@prisma/client";

export class InventoryManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InventoryManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.inventoryManager.count(args);
  }

  async inventoryManagers(
    args: Prisma.InventoryManagerFindManyArgs
  ): Promise<PrismaInventoryManager[]> {
    return this.prisma.inventoryManager.findMany(args);
  }
  async inventoryManager(
    args: Prisma.InventoryManagerFindUniqueArgs
  ): Promise<PrismaInventoryManager | null> {
    return this.prisma.inventoryManager.findUnique(args);
  }
  async createInventoryManager(
    args: Prisma.InventoryManagerCreateArgs
  ): Promise<PrismaInventoryManager> {
    return this.prisma.inventoryManager.create(args);
  }
  async updateInventoryManager(
    args: Prisma.InventoryManagerUpdateArgs
  ): Promise<PrismaInventoryManager> {
    return this.prisma.inventoryManager.update(args);
  }
  async deleteInventoryManager(
    args: Prisma.InventoryManagerDeleteArgs
  ): Promise<PrismaInventoryManager> {
    return this.prisma.inventoryManager.delete(args);
  }
}
