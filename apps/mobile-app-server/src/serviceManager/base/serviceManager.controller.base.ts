/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceManagerService } from "../serviceManager.service";
import { ServiceManagerCreateInput } from "./ServiceManagerCreateInput";
import { ServiceManager } from "./ServiceManager";
import { ServiceManagerFindManyArgs } from "./ServiceManagerFindManyArgs";
import { ServiceManagerWhereUniqueInput } from "./ServiceManagerWhereUniqueInput";
import { ServiceManagerUpdateInput } from "./ServiceManagerUpdateInput";

export class ServiceManagerControllerBase {
  constructor(protected readonly service: ServiceManagerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ServiceManager })
  async createServiceManager(
    @common.Body() data: ServiceManagerCreateInput
  ): Promise<ServiceManager> {
    return await this.service.createServiceManager({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ServiceManager] })
  @ApiNestedQuery(ServiceManagerFindManyArgs)
  async serviceManagers(
    @common.Req() request: Request
  ): Promise<ServiceManager[]> {
    const args = plainToClass(ServiceManagerFindManyArgs, request.query);
    return this.service.serviceManagers({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ServiceManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async serviceManager(
    @common.Param() params: ServiceManagerWhereUniqueInput
  ): Promise<ServiceManager | null> {
    const result = await this.service.serviceManager({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ServiceManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateServiceManager(
    @common.Param() params: ServiceManagerWhereUniqueInput,
    @common.Body() data: ServiceManagerUpdateInput
  ): Promise<ServiceManager | null> {
    try {
      return await this.service.updateServiceManager({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ServiceManager })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteServiceManager(
    @common.Param() params: ServiceManagerWhereUniqueInput
  ): Promise<ServiceManager | null> {
    try {
      return await this.service.deleteServiceManager({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
