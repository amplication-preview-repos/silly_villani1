/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ServiceManager as PrismaServiceManager } from "@prisma/client";

export class ServiceManagerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceManagerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceManager.count(args);
  }

  async serviceManagers(
    args: Prisma.ServiceManagerFindManyArgs
  ): Promise<PrismaServiceManager[]> {
    return this.prisma.serviceManager.findMany(args);
  }
  async serviceManager(
    args: Prisma.ServiceManagerFindUniqueArgs
  ): Promise<PrismaServiceManager | null> {
    return this.prisma.serviceManager.findUnique(args);
  }
  async createServiceManager(
    args: Prisma.ServiceManagerCreateArgs
  ): Promise<PrismaServiceManager> {
    return this.prisma.serviceManager.create(args);
  }
  async updateServiceManager(
    args: Prisma.ServiceManagerUpdateArgs
  ): Promise<PrismaServiceManager> {
    return this.prisma.serviceManager.update(args);
  }
  async deleteServiceManager(
    args: Prisma.ServiceManagerDeleteArgs
  ): Promise<PrismaServiceManager> {
    return this.prisma.serviceManager.delete(args);
  }
}
