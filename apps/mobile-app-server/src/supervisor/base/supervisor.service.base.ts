/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Supervisor as PrismaSupervisor } from "@prisma/client";

export class SupervisorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SupervisorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.supervisor.count(args);
  }

  async supervisors(
    args: Prisma.SupervisorFindManyArgs
  ): Promise<PrismaSupervisor[]> {
    return this.prisma.supervisor.findMany(args);
  }
  async supervisor(
    args: Prisma.SupervisorFindUniqueArgs
  ): Promise<PrismaSupervisor | null> {
    return this.prisma.supervisor.findUnique(args);
  }
  async createSupervisor(
    args: Prisma.SupervisorCreateArgs
  ): Promise<PrismaSupervisor> {
    return this.prisma.supervisor.create(args);
  }
  async updateSupervisor(
    args: Prisma.SupervisorUpdateArgs
  ): Promise<PrismaSupervisor> {
    return this.prisma.supervisor.update(args);
  }
  async deleteSupervisor(
    args: Prisma.SupervisorDeleteArgs
  ): Promise<PrismaSupervisor> {
    return this.prisma.supervisor.delete(args);
  }
}
